8480 Nov 27 17:02:52 itesm-2020-35    launch_jupyter.sh[1008]: [W 17:02:52.206 LabApp] Unreadable Notebook: /root/004-PyTorch-NN.ipynb UnicodeDecodeError('utf-8', b'bplist00\xd1\x01\x02_\x10\x0fWebMainResource\xd5\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c_\x10\x0fWebResourceData_\x10\x13WebResourceMIMEType_\x10\x1bWebResourceTextEncodingName^WebResourceURL_\x10\x14WebResourceFrameNameO\x12\x00\x024!<html><head></head><body><pre style=""word-wrap: break-word; white-space: pre-wrap;"">{\n ""cells"": [\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""# Basic PyTorch Neural Network\\n"",\n    ""Now it\'s time to put the pieces together. In this section we\'ll:\\n"",\n    ""* create a multi-layer deep learning model\\n"",\n    ""* load data\\n"",\n    ""* train and validate the model&lt;br&gt;\\n"",\n    ""\\n"",\n    ""We\'ll also introduce a new step:\\n"",\n    ""* save and load a trained model\\n"",\n    ""\\n"",\n    ""Our goal is to develop a model capable of classifying an iris plant based on four features. This is a multi-class classification where each sample can belong to ONE of 3 classes (&lt;em&gt;Iris setosa&lt;/em&gt;, &lt;em&gt;Iris virginica&lt;/em&gt; or &lt;em&gt;Iris versicolor&lt;/em&gt;). The network will have 4 input neurons (flower dimensions) and 3 output neurons (scores). Our loss function will compare the target label (ground truth) to the corresponding output score. ""\n   ]\n  },\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""## Perform standard imports""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 5,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""import torch\\n"",\n    ""import torch.nn as nn\\n"",\n    ""import torch.nn.functional as F\\n"",\n    ""from torch.utils.data import Dataset, DataLoader\\n"",\n    ""from sklearn.model_selection import train_test_split\\n"",\n    ""\\n"",\n    ""import pandas as pd\\n"",\n    ""import matplotlib.pyplot as plt\\n"",\n    ""%%matplotlib inline""\n   ]\n  },\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""## Create a model class\\n"",\n    ""For this exercise we\'re using the Iris dataset. Since a single straight line can\'t classify three flowers we should include at least one hidden layer in our model.\\n"",\n    ""\\n"",\n    ""In the forward section we\'ll use the &lt;a href=\'https://en.wikipedia.org/wiki/Rectifier_(neural_networks)\'&gt;rectified linear unit&lt;/a&gt; (ReLU)  function&lt;br&gt;\\n"",\n    ""$\\\\quad f(x)=max(0,x)$&lt;br&gt;\\n"",\n    ""as our activation function. This is available as a full module &lt;a href=\'https://pytorch.org/docs/stable/nn.html#relu\'&gt;&lt;strong&gt;&lt;tt&gt;torch.nn.ReLU&lt;/tt&gt;&lt;/strong&gt;&lt;/a&gt; or as just a functional call &lt;a href=\'https://pytorch.org/docs/stable/nn.html#id27\'&gt;&lt;strong&gt;&lt;tt&gt;torch.nn.functional.relu&lt;/tt&gt;&lt;/strong&gt;&lt;/a&gt;""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 8,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""class Model(nn.Module):\\n"",\n    ""    def __init__(self, in_features=4, h1=8, h2=9, out_features=3):\\n"",\n    ""        super().__init__()\\n"",\n    ""        self.fc1 = nn.Linear(in_features,h1)    # input layer\\n"",\n    ""        self.fc2 = nn.Linear(h1, h2)            # hidden layer\\n"",\n    ""        #self.fc3 = nn.Linear(h2, h3)            # hidden layer\\n"",\n    ""        self.out = nn.Linear(h2, out_features)  # output layer\\n"",\n    ""        \\n"",\n    ""    def forward(self, x):\\n"",\n    ""        x = F.relu(self.fc1(x))\\n"",\n    ""        x = F.relu(self.fc2(x))\\n"",\n    ""       #x = F.relu(self.fc3(x))\\n"",\n    ""        x = self.out(x)\\n"",\n    ""        return x""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 9,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""# Instantiate the Model class using parameter defaults:\\n"",\n    ""torch.manual_seed(32)\\n"",\n    ""model = Model()""\n   ]\n  },\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""## Load the iris dataset""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 11,\n   ""metadata"": {},\n   ""outputs"": [\n    {\n     ""data"": {\n      ""text/html"": [\n       ""&lt;div&gt;\\n"",\n       ""&lt;style scoped&gt;\\n"",\n       ""    .dataframe tbody tr th:only-of-type {\\n"",\n       ""        vertical-align: middle;\\n"",\n       ""    }\\n"",\n       ""\\n"",\n       ""    .dataframe tbody tr th {\\n"",\n       ""        vertical-align: top;\\n"",\n       ""    }\\n"",\n       ""\\n"",\n       ""    .dataframe thead th {\\n"",\n       ""        text-align: right;\\n"",\n       ""    }\\n"",\n       ""&lt;/style&gt;\\n"",\n       ""&lt;table border=\\""1\\"" class=\\""dataframe\\""&gt;\\n"",\n       ""  &lt;thead&gt;\\n"",\n       ""    &lt;tr style=\\""text-align: right;\\""&gt;\\n"",\n       ""      &lt;th&gt;&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;sepal length (cm)&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;sepal width (cm)&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;petal length (cm)&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;petal width (cm)&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;target&lt;/th&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""  &lt;/thead&gt;\\n"",\n       ""  &lt;tbody&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;0&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;5.1&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.5&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.4&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;1&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;4.9&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.0&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.4&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;2&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;4.7&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.3&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;3&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;4.6&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.1&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.5&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;4&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;5.0&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.6&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.4&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""  &lt;/tbody&gt;\\n"",\n       ""&lt;/table&gt;\\n"",\n       ""&lt;/div&gt;""\n      ],\n      ""text/plain"": [\n       ""   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\\\\n"",\n       ""0                5.1               3.5                1.4               0.2   \\n"",\n       ""1                4.9               3.0                1.4               0.2   \\n"",\n       ""2                4.7               3.2                1.3               0.2   \\n"",\n       ""3                4.6               3.1                1.5               0.2   \\n"",\n       ""4                5.0               3.6                1.4               0.2   \\n"",\n       ""\\n"",\n       ""   target  \\n"",\n       ""0     0.0  \\n"",\n       ""1     0.0  \\n"",\n       ""2     0.0  \\n"",\n       ""3     0.0  \\n"",\n       ""4     0.0  ""\n      ]\n     },\n     ""execution_count"": 11,\n     ""metadata"": {},\n     ""output_type"": ""execute_result""\n    }\n   ],\n   ""source"": [\n    ""df = pd.read_csv(\'iris.csv\')\\n"",\n    ""df.head()""\n   ]\n  },\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""## Plot the dataset\\n"",\n    ""The iris dataset has 4 features. To get an idea how they correlate

8480 Nov 27 16:36:23 itesm-2020-35    launch_jupyter.sh[1008]: [W 16:36:23.554 LabApp] Unreadable Notebook: /root/004-PyTorch-NN.ipynb UnicodeDecodeError('utf-8', b'bplist00\xd1\x01\x02_\x10\x0fWebMainResource\xd5\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c_\x10\x0fWebResourceData_\x10\x13WebResourceMIMEType_\x10\x1bWebResourceTextEncodingName^WebResourceURL_\x10\x14WebResourceFrameNameO\x12\x00\x024!<html><head></head><body><pre style=""word-wrap: break-word; white-space: pre-wrap;"">{\n ""cells"": [\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""# Basic PyTorch Neural Network\\n"",\n    ""Now it\'s time to put the pieces together. In this section we\'ll:\\n"",\n    ""* create a multi-layer deep learning model\\n"",\n    ""* load data\\n"",\n    ""* train and validate the model&lt;br&gt;\\n"",\n    ""\\n"",\n    ""We\'ll also introduce a new step:\\n"",\n    ""* save and load a trained model\\n"",\n    ""\\n"",\n    ""Our goal is to develop a model capable of classifying an iris plant based on four features. This is a multi-class classification where each sample can belong to ONE of 3 classes (&lt;em&gt;Iris setosa&lt;/em&gt;, &lt;em&gt;Iris virginica&lt;/em&gt; or &lt;em&gt;Iris versicolor&lt;/em&gt;). The network will have 4 input neurons (flower dimensions) and 3 output neurons (scores). Our loss function will compare the target label (ground truth) to the corresponding output score. ""\n   ]\n  },\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""## Perform standard imports""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 5,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""import torch\\n"",\n    ""import torch.nn as nn\\n"",\n    ""import torch.nn.functional as F\\n"",\n    ""from torch.utils.data import Dataset, DataLoader\\n"",\n    ""from sklearn.model_selection import train_test_split\\n"",\n    ""\\n"",\n    ""import pandas as pd\\n"",\n    ""import matplotlib.pyplot as plt\\n"",\n    ""%%matplotlib inline""\n   ]\n  },\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""## Create a model class\\n"",\n    ""For this exercise we\'re using the Iris dataset. Since a single straight line can\'t classify three flowers we should include at least one hidden layer in our model.\\n"",\n    ""\\n"",\n    ""In the forward section we\'ll use the &lt;a href=\'https://en.wikipedia.org/wiki/Rectifier_(neural_networks)\'&gt;rectified linear unit&lt;/a&gt; (ReLU)  function&lt;br&gt;\\n"",\n    ""$\\\\quad f(x)=max(0,x)$&lt;br&gt;\\n"",\n    ""as our activation function. This is available as a full module &lt;a href=\'https://pytorch.org/docs/stable/nn.html#relu\'&gt;&lt;strong&gt;&lt;tt&gt;torch.nn.ReLU&lt;/tt&gt;&lt;/strong&gt;&lt;/a&gt; or as just a functional call &lt;a href=\'https://pytorch.org/docs/stable/nn.html#id27\'&gt;&lt;strong&gt;&lt;tt&gt;torch.nn.functional.relu&lt;/tt&gt;&lt;/strong&gt;&lt;/a&gt;""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 8,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""class Model(nn.Module):\\n"",\n    ""    def __init__(self, in_features=4, h1=8, h2=9, out_features=3):\\n"",\n    ""        super().__init__()\\n"",\n    ""        self.fc1 = nn.Linear(in_features,h1)    # input layer\\n"",\n    ""        self.fc2 = nn.Linear(h1, h2)            # hidden layer\\n"",\n    ""        #self.fc3 = nn.Linear(h2, h3)            # hidden layer\\n"",\n    ""        self.out = nn.Linear(h2, out_features)  # output layer\\n"",\n    ""        \\n"",\n    ""    def forward(self, x):\\n"",\n    ""        x = F.relu(self.fc1(x))\\n"",\n    ""        x = F.relu(self.fc2(x))\\n"",\n    ""       #x = F.relu(self.fc3(x))\\n"",\n    ""        x = self.out(x)\\n"",\n    ""        return x""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 9,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""# Instantiate the Model class using parameter defaults:\\n"",\n    ""torch.manual_seed(32)\\n"",\n    ""model = Model()""\n   ]\n  },\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""## Load the iris dataset""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 11,\n   ""metadata"": {},\n   ""outputs"": [\n    {\n     ""data"": {\n      ""text/html"": [\n       ""&lt;div&gt;\\n"",\n       ""&lt;style scoped&gt;\\n"",\n       ""    .dataframe tbody tr th:only-of-type {\\n"",\n       ""        vertical-align: middle;\\n"",\n       ""    }\\n"",\n       ""\\n"",\n       ""    .dataframe tbody tr th {\\n"",\n       ""        vertical-align: top;\\n"",\n       ""    }\\n"",\n       ""\\n"",\n       ""    .dataframe thead th {\\n"",\n       ""        text-align: right;\\n"",\n       ""    }\\n"",\n       ""&lt;/style&gt;\\n"",\n       ""&lt;table border=\\""1\\"" class=\\""dataframe\\""&gt;\\n"",\n       ""  &lt;thead&gt;\\n"",\n       ""    &lt;tr style=\\""text-align: right;\\""&gt;\\n"",\n       ""      &lt;th&gt;&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;sepal length (cm)&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;sepal width (cm)&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;petal length (cm)&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;petal width (cm)&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;target&lt;/th&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""  &lt;/thead&gt;\\n"",\n       ""  &lt;tbody&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;0&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;5.1&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.5&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.4&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;1&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;4.9&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.0&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.4&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;2&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;4.7&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.3&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;3&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;4.6&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.1&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.5&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;4&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;5.0&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.6&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.4&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""  &lt;/tbody&gt;\\n"",\n       ""&lt;/table&gt;\\n"",\n       ""&lt;/div&gt;""\n      ],\n      ""text/plain"": [\n       ""   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\\\\n"",\n       ""0                5.1               3.5                1.4               0.2   \\n"",\n       ""1                4.9               3.0                1.4               0.2   \\n"",\n       ""2                4.7               3.2                1.3               0.2   \\n"",\n       ""3                4.6               3.1                1.5               0.2   \\n"",\n       ""4                5.0               3.6                1.4               0.2   \\n"",\n       ""\\n"",\n       ""   target  \\n"",\n       ""0     0.0  \\n"",\n       ""1     0.0  \\n"",\n       ""2     0.0  \\n"",\n       ""3     0.0  \\n"",\n       ""4     0.0  ""\n      ]\n     },\n     ""execution_count"": 11,\n     ""metadata"": {},\n     ""output_type"": ""execute_result""\n    }\n   ],\n   ""source"": [\n    ""df = pd.read_csv(\'iris.csv\')\\n"",\n    ""df.head()""\n   ]\n  },\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""## Plot the dataset\\n"",\n    ""The iris dataset has 4 features. To get an idea how they correlate

8477 Nov 27 17:02:52 itesm-2020-35    launch_jupyter.sh[1008]: [W 17:02:52.206 LabApp] 400 GET /api/contents/004-PyTorch-NN.ipynb?type=notebook&content=1&1606518172137 (189.209.251.75): Unreadable Notebook: /root/004-PyTorch-NN.ipynb UnicodeDecodeError('utf-8', b'bplist00\xd1\x01\x02_\x10\x0fWebMainResource\xd5\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c_\x10\x0fWebResourceData_\x10\x13WebResourceMIMEType_\x10\x1bWebResourceTextEncodingName^WebResourceURL_\x10\x14WebResourceFrameNameO\x12\x00\x024!<html><head></head><body><pre style=""word-wrap: break-word; white-space: pre-wrap;"">{\n ""cells"": [\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""# Basic PyTorch Neural Network\\n"",\n    ""Now it\'s time to put the pieces together. In this section we\'ll:\\n"",\n    ""* create a multi-layer deep learning model\\n"",\n    ""* load data\\n"",\n    ""* train and validate the model&lt;br&gt;\\n"",\n    ""\\n"",\n    ""We\'ll also introduce a new step:\\n"",\n    ""* save and load a trained model\\n"",\n    ""\\n"",\n    ""Our goal is to develop a model capable of classifying an iris plant based on four features. This is a multi-class classification where each sample can belong to ONE of 3 classes (&lt;em&gt;Iris setosa&lt;/em&gt;, &lt;em&gt;Iris virginica&lt;/em&gt; or &lt;em&gt;Iris versicolor&lt;/em&gt;). The network will have 4 input neurons (flower dimensions) and 3 output neurons (scores). Our loss function will compare the target label (ground truth) to the corresponding output score. ""\n   ]\n  },\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""## Perform standard imports""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 5,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""import torch\\n"",\n    ""import torch.nn as nn\\n"",\n    ""import torch.nn.functional as F\\n"",\n    ""from torch.utils.data import Dataset, DataLoader\\n"",\n    ""from sklearn.model_selection import train_test_split\\n"",\n    ""\\n"",\n    ""import pandas as pd\\n"",\n    ""import matplotlib.pyplot as plt\\n"",\n    ""%matplotlib inline""\n   ]\n  },\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""## Create a model class\\n"",\n    ""For this exercise we\'re using the Iris dataset. Since a single straight line can\'t classify three flowers we should include at least one hidden layer in our model.\\n"",\n    ""\\n"",\n    ""In the forward section we\'ll use the &lt;a href=\'https://en.wikipedia.org/wiki/Rectifier_(neural_networks)\'&gt;rectified linear unit&lt;/a&gt; (ReLU)  function&lt;br&gt;\\n"",\n    ""$\\\\quad f(x)=max(0,x)$&lt;br&gt;\\n"",\n    ""as our activation function. This is available as a full module &lt;a href=\'https://pytorch.org/docs/stable/nn.html#relu\'&gt;&lt;strong&gt;&lt;tt&gt;torch.nn.ReLU&lt;/tt&gt;&lt;/strong&gt;&lt;/a&gt; or as just a functional call &lt;a href=\'https://pytorch.org/docs/stable/nn.html#id27\'&gt;&lt;strong&gt;&lt;tt&gt;torch.nn.functional.relu&lt;/tt&gt;&lt;/strong&gt;&lt;/a&gt;""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 8,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""class Model(nn.Module):\\n"",\n    ""    def __init__(self, in_features=4, h1=8, h2=9, out_features=3):\\n"",\n    ""        super().__init__()\\n"",\n    ""        self.fc1 = nn.Linear(in_features,h1)    # input layer\\n"",\n    ""        self.fc2 = nn.Linear(h1, h2)            # hidden layer\\n"",\n    ""        #self.fc3 = nn.Linear(h2, h3)            # hidden layer\\n"",\n    ""        self.out = nn.Linear(h2, out_features)  # output layer\\n"",\n    ""        \\n"",\n    ""    def forward(self, x):\\n"",\n    ""        x = F.relu(self.fc1(x))\\n"",\n    ""        x = F.relu(self.fc2(x))\\n"",\n    ""       #x = F.relu(self.fc3(x))\\n"",\n    ""        x = self.out(x)\\n"",\n    ""        return x""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 9,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""# Instantiate the Model class using parameter defaults:\\n"",\n    ""torch.manual_seed(32)\\n"",\n    ""model = Model()""\n   ]\n  },\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""## Load the iris dataset""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 11,\n   ""metadata"": {},\n   ""outputs"": [\n    {\n     ""data"": {\n      ""text/html"": [\n       ""&lt;div&gt;\\n"",\n       ""&lt;style scoped&gt;\\n"",\n       ""    .dataframe tbody tr th:only-of-type {\\n"",\n       ""        vertical-align: middle;\\n"",\n       ""    }\\n"",\n       ""\\n"",\n       ""    .dataframe tbody tr th {\\n"",\n       ""        vertical-align: top;\\n"",\n       ""    }\\n"",\n       ""\\n"",\n       ""    .dataframe thead th {\\n"",\n       ""        text-align: right;\\n"",\n       ""    }\\n"",\n       ""&lt;/style&gt;\\n"",\n       ""&lt;table border=\\""1\\"" class=\\""dataframe\\""&gt;\\n"",\n       ""  &lt;thead&gt;\\n"",\n       ""    &lt;tr style=\\""text-align: right;\\""&gt;\\n"",\n       ""      &lt;th&gt;&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;sepal length (cm)&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;sepal width (cm)&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;petal length (cm)&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;petal width (cm)&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;target&lt;/th&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""  &lt;/thead&gt;\\n"",\n       ""  &lt;tbody&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;0&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;5.1&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.5&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.4&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;1&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;4.9&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.0&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.4&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;2&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;4.7&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.3&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;3&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;4.6&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.1&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.5&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;4&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;5.0&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.6&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.4&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""  &lt;/tbody&gt;\\n"",\n       ""&lt;/table&gt;\\n"",\n       ""&lt;/div&gt;""\n      ],\n      ""text/plain"": [\n       ""   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\\\\n"",\n       ""0                5.1               3.5                1.4               0.2   \\n"",\n       ""1                4.9               3.0                1.4               0.2   \\n"",\n       ""2                4.7               3.2                1.3               0.2   \\n"",\n       ""3                4.6               3.1                1.5               0.2   \\n"",\n       ""4                5.0               3.6                1.4               0.2   \\n"",\n       ""\\n"",\n       ""   target  \\n"",\n       ""0     0.0  \\n"",\n       ""1     0.0  \\n"",\n       ""2     0.0  \\n"",\n       ""3     0.0  \\n"",\n       ""4     0.0  ""\n      ]\n     },\n     ""execution_count"": 11,\n     ""metadata"": {},\n     ""output_type"": ""execute_result""\n    }\n   ],\n   ""source"": [\n    ""df = pd.read_csv(\'iris.csv\')\\n"",\n    ""df.head()""\n   ]\n  },\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    

8477 Nov 27 16:36:23 itesm-2020-35    launch_jupyter.sh[1008]: [W 16:36:23.549 LabApp] 400 GET /api/contents/004-PyTorch-NN.ipynb?type=notebook&content=1&1606516583519 (189.209.251.75): Unreadable Notebook: /root/004-PyTorch-NN.ipynb UnicodeDecodeError('utf-8', b'bplist00\xd1\x01\x02_\x10\x0fWebMainResource\xd5\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c_\x10\x0fWebResourceData_\x10\x13WebResourceMIMEType_\x10\x1bWebResourceTextEncodingName^WebResourceURL_\x10\x14WebResourceFrameNameO\x12\x00\x024!<html><head></head><body><pre style=""word-wrap: break-word; white-space: pre-wrap;"">{\n ""cells"": [\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""# Basic PyTorch Neural Network\\n"",\n    ""Now it\'s time to put the pieces together. In this section we\'ll:\\n"",\n    ""* create a multi-layer deep learning model\\n"",\n    ""* load data\\n"",\n    ""* train and validate the model&lt;br&gt;\\n"",\n    ""\\n"",\n    ""We\'ll also introduce a new step:\\n"",\n    ""* save and load a trained model\\n"",\n    ""\\n"",\n    ""Our goal is to develop a model capable of classifying an iris plant based on four features. This is a multi-class classification where each sample can belong to ONE of 3 classes (&lt;em&gt;Iris setosa&lt;/em&gt;, &lt;em&gt;Iris virginica&lt;/em&gt; or &lt;em&gt;Iris versicolor&lt;/em&gt;). The network will have 4 input neurons (flower dimensions) and 3 output neurons (scores). Our loss function will compare the target label (ground truth) to the corresponding output score. ""\n   ]\n  },\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""## Perform standard imports""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 5,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""import torch\\n"",\n    ""import torch.nn as nn\\n"",\n    ""import torch.nn.functional as F\\n"",\n    ""from torch.utils.data import Dataset, DataLoader\\n"",\n    ""from sklearn.model_selection import train_test_split\\n"",\n    ""\\n"",\n    ""import pandas as pd\\n"",\n    ""import matplotlib.pyplot as plt\\n"",\n    ""%matplotlib inline""\n   ]\n  },\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""## Create a model class\\n"",\n    ""For this exercise we\'re using the Iris dataset. Since a single straight line can\'t classify three flowers we should include at least one hidden layer in our model.\\n"",\n    ""\\n"",\n    ""In the forward section we\'ll use the &lt;a href=\'https://en.wikipedia.org/wiki/Rectifier_(neural_networks)\'&gt;rectified linear unit&lt;/a&gt; (ReLU)  function&lt;br&gt;\\n"",\n    ""$\\\\quad f(x)=max(0,x)$&lt;br&gt;\\n"",\n    ""as our activation function. This is available as a full module &lt;a href=\'https://pytorch.org/docs/stable/nn.html#relu\'&gt;&lt;strong&gt;&lt;tt&gt;torch.nn.ReLU&lt;/tt&gt;&lt;/strong&gt;&lt;/a&gt; or as just a functional call &lt;a href=\'https://pytorch.org/docs/stable/nn.html#id27\'&gt;&lt;strong&gt;&lt;tt&gt;torch.nn.functional.relu&lt;/tt&gt;&lt;/strong&gt;&lt;/a&gt;""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 8,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""class Model(nn.Module):\\n"",\n    ""    def __init__(self, in_features=4, h1=8, h2=9, out_features=3):\\n"",\n    ""        super().__init__()\\n"",\n    ""        self.fc1 = nn.Linear(in_features,h1)    # input layer\\n"",\n    ""        self.fc2 = nn.Linear(h1, h2)            # hidden layer\\n"",\n    ""        #self.fc3 = nn.Linear(h2, h3)            # hidden layer\\n"",\n    ""        self.out = nn.Linear(h2, out_features)  # output layer\\n"",\n    ""        \\n"",\n    ""    def forward(self, x):\\n"",\n    ""        x = F.relu(self.fc1(x))\\n"",\n    ""        x = F.relu(self.fc2(x))\\n"",\n    ""       #x = F.relu(self.fc3(x))\\n"",\n    ""        x = self.out(x)\\n"",\n    ""        return x""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 9,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""# Instantiate the Model class using parameter defaults:\\n"",\n    ""torch.manual_seed(32)\\n"",\n    ""model = Model()""\n   ]\n  },\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    ""## Load the iris dataset""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 11,\n   ""metadata"": {},\n   ""outputs"": [\n    {\n     ""data"": {\n      ""text/html"": [\n       ""&lt;div&gt;\\n"",\n       ""&lt;style scoped&gt;\\n"",\n       ""    .dataframe tbody tr th:only-of-type {\\n"",\n       ""        vertical-align: middle;\\n"",\n       ""    }\\n"",\n       ""\\n"",\n       ""    .dataframe tbody tr th {\\n"",\n       ""        vertical-align: top;\\n"",\n       ""    }\\n"",\n       ""\\n"",\n       ""    .dataframe thead th {\\n"",\n       ""        text-align: right;\\n"",\n       ""    }\\n"",\n       ""&lt;/style&gt;\\n"",\n       ""&lt;table border=\\""1\\"" class=\\""dataframe\\""&gt;\\n"",\n       ""  &lt;thead&gt;\\n"",\n       ""    &lt;tr style=\\""text-align: right;\\""&gt;\\n"",\n       ""      &lt;th&gt;&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;sepal length (cm)&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;sepal width (cm)&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;petal length (cm)&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;petal width (cm)&lt;/th&gt;\\n"",\n       ""      &lt;th&gt;target&lt;/th&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""  &lt;/thead&gt;\\n"",\n       ""  &lt;tbody&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;0&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;5.1&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.5&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.4&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;1&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;4.9&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.0&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.4&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;2&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;4.7&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.3&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;3&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;4.6&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.1&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.5&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""    &lt;tr&gt;\\n"",\n       ""      &lt;th&gt;4&lt;/th&gt;\\n"",\n       ""      &lt;td&gt;5.0&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;3.6&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;1.4&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.2&lt;/td&gt;\\n"",\n       ""      &lt;td&gt;0.0&lt;/td&gt;\\n"",\n       ""    &lt;/tr&gt;\\n"",\n       ""  &lt;/tbody&gt;\\n"",\n       ""&lt;/table&gt;\\n"",\n       ""&lt;/div&gt;""\n      ],\n      ""text/plain"": [\n       ""   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\\\\n"",\n       ""0                5.1               3.5                1.4               0.2   \\n"",\n       ""1                4.9               3.0                1.4               0.2   \\n"",\n       ""2                4.7               3.2                1.3               0.2   \\n"",\n       ""3                4.6               3.1                1.5               0.2   \\n"",\n       ""4                5.0               3.6                1.4               0.2   \\n"",\n       ""\\n"",\n       ""   target  \\n"",\n       ""0     0.0  \\n"",\n       ""1     0.0  \\n"",\n       ""2     0.0  \\n"",\n       ""3     0.0  \\n"",\n       ""4     0.0  ""\n      ]\n     },\n     ""execution_count"": 11,\n     ""metadata"": {},\n     ""output_type"": ""execute_result""\n    }\n   ],\n   ""source"": [\n    ""df = pd.read_csv(\'iris.csv\')\\n"",\n    ""df.head()""\n   ]\n  },\n  {\n   ""cell_type"": ""markdown"",\n   ""metadata"": {},\n   ""source"": [\n    

8292 Nov 27 17:07:25 itesm-2020-35    launch_jupyter.sh[1008]: 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\\n"",\n      ""text/plain"": [\n       ""&lt;Figure size 432x288 with 1 Axes&gt;""\n      ]\n     },\n     ""metadata"": {\n      ""needs_background"": ""light""\n     },\n     ""output_type"": ""display_data""\n    }\n   ],\n   ""source"": [\n    ""plot_fit(\\""Trained Model\\"")""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  }\n ],\n ""metadata"": {\n  ""kernelspec"": {\n   ""display_name"": ""Python 3"",\n   ""language"": ""python"",\n   ""name"": ""python3""\n  },\n  ""language_info"": {\n   ""codemirror_mode"": {\n    ""name"": ""ipython"",\n    ""version"": 3\n   },\n   ""file_extension"": "".py"",\n   ""mimetype"": ""text/x-python"",\n   ""name"": ""python"",\n   ""nbconvert_exporter"": ""python"",\n   ""pygments_lexer"": ""ipython3"",\n   ""version"": ""3.6.9""\n  }\n },\n ""nbformat"": 4,\n ""nbformat_minor"": 4\n}\n</pre></body></html>Ztext/plainUUTF-8_\x10chttps://raw.githubusercontent.com/utsabigdata/AI-Workshop/master/Day-4/003Linear%20Regression.ipynbP\x00\x08\x00\x0b\x00\x1d\x00(\x00:\x00P\x00n\x00}\x00\x94\xda\xf8\xdb\x03\xdb\t\xdbo\x00\x00\x00\x00\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00\x00\r

8292 Nov 27 17:06:59 itesm-2020-35    launch_jupyter.sh[1008]: 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\\n"",\n      ""text/plain"": [\n       ""&lt;Figure size 432x288 with 1 Axes&gt;""\n      ]\n     },\n     ""metadata"": {\n      ""needs_background"": ""light""\n     },\n     ""output_type"": ""display_data""\n    }\n   ],\n   ""source"": [\n    ""plot_fit(\\""Trained Model\\"")""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  }\n ],\n ""metadata"": {\n  ""kernelspec"": {\n   ""display_name"": ""Python 3"",\n   ""language"": ""python"",\n   ""name"": ""python3""\n  },\n  ""language_info"": {\n   ""codemirror_mode"": {\n    ""name"": ""ipython"",\n    ""version"": 3\n   },\n   ""file_extension"": "".py"",\n   ""mimetype"": ""text/x-python"",\n   ""name"": ""python"",\n   ""nbconvert_exporter"": ""python"",\n   ""pygments_lexer"": ""ipython3"",\n   ""version"": ""3.6.9""\n  }\n },\n ""nbformat"": 4,\n ""nbformat_minor"": 4\n}\n</pre></body></html>Ztext/plainUUTF-8_\x10chttps://raw.githubusercontent.com/utsabigdata/AI-Workshop/master/Day-4/003Linear%20Regression.ipynbP\x00\x08\x00\x0b\x00\x1d\x00(\x00:\x00P\x00n\x00}\x00\x94\xda\xf8\xdb\x03\xdb\t\xdbo\x00\x00\x00\x00\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00\x00\r

8292 Nov 27 17:06:36 itesm-2020-35    launch_jupyter.sh[1008]: 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\\n"",\n      ""text/plain"": [\n       ""&lt;Figure size 432x288 with 1 Axes&gt;""\n      ]\n     },\n     ""metadata"": {\n      ""needs_background"": ""light""\n     },\n     ""output_type"": ""display_data""\n    }\n   ],\n   ""source"": [\n    ""plot_fit(\\""Trained Model\\"")""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  }\n ],\n ""metadata"": {\n  ""kernelspec"": {\n   ""display_name"": ""Python 3"",\n   ""language"": ""python"",\n   ""name"": ""python3""\n  },\n  ""language_info"": {\n   ""codemirror_mode"": {\n    ""name"": ""ipython"",\n    ""version"": 3\n   },\n   ""file_extension"": "".py"",\n   ""mimetype"": ""text/x-python"",\n   ""name"": ""python"",\n   ""nbconvert_exporter"": ""python"",\n   ""pygments_lexer"": ""ipython3"",\n   ""version"": ""3.6.9""\n  }\n },\n ""nbformat"": 4,\n ""nbformat_minor"": 4\n}\n</pre></body></html>Ztext/plainUUTF-8_\x10chttps://raw.githubusercontent.com/utsabigdata/AI-Workshop/master/Day-4/003Linear%20Regression.ipynbP\x00\x08\x00\x0b\x00\x1d\x00(\x00:\x00P\x00n\x00}\x00\x94\xda\xf8\xdb\x03\xdb\t\xdbo\x00\x00\x00\x00\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00\x00\r

8292 Nov 27 17:02:52 itesm-2020-35    launch_jupyter.sh[1008]: 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\\n"",\n      ""text/plain"": [\n       ""&lt;Figure size 432x288 with 1 Axes&gt;""\n      ]\n     },\n     ""metadata"": {\n      ""needs_background"": ""light""\n     },\n     ""output_type"": ""display_data""\n    }\n   ],\n   ""source"": [\n    ""plot_fit(\\""Trained Model\\"")""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  }\n ],\n ""metadata"": {\n  ""kernelspec"": {\n   ""display_name"": ""Python 3"",\n   ""language"": ""python"",\n   ""name"": ""python3""\n  },\n  ""language_info"": {\n   ""codemirror_mode"": {\n    ""name"": ""ipython"",\n    ""version"": 3\n   },\n   ""file_extension"": "".py"",\n   ""mimetype"": ""text/x-python"",\n   ""name"": ""python"",\n   ""nbconvert_exporter"": ""python"",\n   ""pygments_lexer"": ""ipython3"",\n   ""version"": ""3.6.9""\n  }\n },\n ""nbformat"": 4,\n ""nbformat_minor"": 4\n}\n</pre></body></html>Ztext/plainUUTF-8_\x10chttps://raw.githubusercontent.com/utsabigdata/AI-Workshop/master/Day-4/003Linear%20Regression.ipynbP\x00\x08\x00\x0b\x00\x1d\x00(\x00:\x00P\x00n\x00}\x00\x94\xda\xf8\xdb\x03\xdb\t\xdbo\x00\x00\x00\x00\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00\x00\r

8292 Nov 27 16:29:17 itesm-2020-35    launch_jupyter.sh[1008]: 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\\n"",\n      ""text/plain"": [\n       ""&lt;Figure size 432x288 with 1 Axes&gt;""\n      ]\n     },\n     ""metadata"": {\n      ""needs_background"": ""light""\n     },\n     ""output_type"": ""display_data""\n    }\n   ],\n   ""source"": [\n    ""plot_fit(\\""Trained Model\\"")""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  }\n ],\n ""metadata"": {\n  ""kernelspec"": {\n   ""display_name"": ""Python 3"",\n   ""language"": ""python"",\n   ""name"": ""python3""\n  },\n  ""language_info"": {\n   ""codemirror_mode"": {\n    ""name"": ""ipython"",\n    ""version"": 3\n   },\n   ""file_extension"": "".py"",\n   ""mimetype"": ""text/x-python"",\n   ""name"": ""python"",\n   ""nbconvert_exporter"": ""python"",\n   ""pygments_lexer"": ""ipython3"",\n   ""version"": ""3.6.9""\n  }\n },\n ""nbformat"": 4,\n ""nbformat_minor"": 4\n}\n</pre></body></html>Ztext/plainUUTF-8_\x10chttps://raw.githubusercontent.com/utsabigdata/AI-Workshop/master/Day-4/003Linear%20Regression.ipynbP\x00\x08\x00\x0b\x00\x1d\x00(\x00:\x00P\x00n\x00}\x00\x94\xda\xf8\xdb\x03\xdb\t\xdbo\x00\x00\x00\x00\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00\x00\r

8284 Nov 27 17:07:25 itesm-2020-35    launch_jupyter.sh[1008]: 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\\n"",\n      ""text/plain"": [\n       ""&lt;Figure size 432x288 with 1 Axes&gt;""\n      ]\n     },\n     ""metadata"": {\n      ""needs_background"": ""light""\n     },\n     ""output_type"": ""display_data""\n    }\n   ],\n   ""source"": [\n    ""plot_fit(\\""Trained Model\\"")""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  }\n ],\n ""metadata"": {\n  ""kernelspec"": {\n   ""display_name"": ""Python 3"",\n   ""language"": ""python"",\n   ""name"": ""python3""\n  },\n  ""language_info"": {\n   ""codemirror_mode"": {\n    ""name"": ""ipython"",\n    ""version"": 3\n   },\n   ""file_extension"": "".py"",\n   ""mimetype"": ""text/x-python"",\n   ""name"": ""python"",\n   ""nbconvert_exporter"": ""python"",\n   ""pygments_lexer"": ""ipython3"",\n   ""version"": ""3.6.9""\n  }\n },\n ""nbformat"": 4,\n ""nbformat_minor"": 4\n}\n</pre></body></html>Ztext/plainUUTF-8_\x10chttps://raw.githubusercontent.com/utsabigdata/AI-Workshop/master/Day-4/003Linear%%20Regression.ipynbP\x00\x08\x00\x0b\x00\x1d\x00(\x00:\x00P\x00n\x00}\x00\x94\xda\xf8\xdb\x03\xdb\t\xdbo\x00\x00\x00\x00\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdbp', 8, 9, 'invalid continuation byte')

8284 Nov 27 17:06:59 itesm-2020-35    launch_jupyter.sh[1008]: 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\\n"",\n      ""text/plain"": [\n       ""&lt;Figure size 432x288 with 1 Axes&gt;""\n      ]\n     },\n     ""metadata"": {\n      ""needs_background"": ""light""\n     },\n     ""output_type"": ""display_data""\n    }\n   ],\n   ""source"": [\n    ""plot_fit(\\""Trained Model\\"")""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  }\n ],\n ""metadata"": {\n  ""kernelspec"": {\n   ""display_name"": ""Python 3"",\n   ""language"": ""python"",\n   ""name"": ""python3""\n  },\n  ""language_info"": {\n   ""codemirror_mode"": {\n    ""name"": ""ipython"",\n    ""version"": 3\n   },\n   ""file_extension"": "".py"",\n   ""mimetype"": ""text/x-python"",\n   ""name"": ""python"",\n   ""nbconvert_exporter"": ""python"",\n   ""pygments_lexer"": ""ipython3"",\n   ""version"": ""3.6.9""\n  }\n },\n ""nbformat"": 4,\n ""nbformat_minor"": 4\n}\n</pre></body></html>Ztext/plainUUTF-8_\x10chttps://raw.githubusercontent.com/utsabigdata/AI-Workshop/master/Day-4/003Linear%%20Regression.ipynbP\x00\x08\x00\x0b\x00\x1d\x00(\x00:\x00P\x00n\x00}\x00\x94\xda\xf8\xdb\x03\xdb\t\xdbo\x00\x00\x00\x00\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdbp', 8, 9, 'invalid continuation byte')

8284 Nov 27 17:06:36 itesm-2020-35    launch_jupyter.sh[1008]: 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\\n"",\n      ""text/plain"": [\n       ""&lt;Figure size 432x288 with 1 Axes&gt;""\n      ]\n     },\n     ""metadata"": {\n      ""needs_background"": ""light""\n     },\n     ""output_type"": ""display_data""\n    }\n   ],\n   ""source"": [\n    ""plot_fit(\\""Trained Model\\"")""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  }\n ],\n ""metadata"": {\n  ""kernelspec"": {\n   ""display_name"": ""Python 3"",\n   ""language"": ""python"",\n   ""name"": ""python3""\n  },\n  ""language_info"": {\n   ""codemirror_mode"": {\n    ""name"": ""ipython"",\n    ""version"": 3\n   },\n   ""file_extension"": "".py"",\n   ""mimetype"": ""text/x-python"",\n   ""name"": ""python"",\n   ""nbconvert_exporter"": ""python"",\n   ""pygments_lexer"": ""ipython3"",\n   ""version"": ""3.6.9""\n  }\n },\n ""nbformat"": 4,\n ""nbformat_minor"": 4\n}\n</pre></body></html>Ztext/plainUUTF-8_\x10chttps://raw.githubusercontent.com/utsabigdata/AI-Workshop/master/Day-4/003Linear%%20Regression.ipynbP\x00\x08\x00\x0b\x00\x1d\x00(\x00:\x00P\x00n\x00}\x00\x94\xda\xf8\xdb\x03\xdb\t\xdbo\x00\x00\x00\x00\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdbp', 8, 9, 'invalid continuation byte')

8284 Nov 27 17:02:52 itesm-2020-35    launch_jupyter.sh[1008]: 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\\n"",\n      ""text/plain"": [\n       ""&lt;Figure size 432x288 with 1 Axes&gt;""\n      ]\n     },\n     ""metadata"": {\n      ""needs_background"": ""light""\n     },\n     ""output_type"": ""display_data""\n    }\n   ],\n   ""source"": [\n    ""plot_fit(\\""Trained Model\\"")""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  }\n ],\n ""metadata"": {\n  ""kernelspec"": {\n   ""display_name"": ""Python 3"",\n   ""language"": ""python"",\n   ""name"": ""python3""\n  },\n  ""language_info"": {\n   ""codemirror_mode"": {\n    ""name"": ""ipython"",\n    ""version"": 3\n   },\n   ""file_extension"": "".py"",\n   ""mimetype"": ""text/x-python"",\n   ""name"": ""python"",\n   ""nbconvert_exporter"": ""python"",\n   ""pygments_lexer"": ""ipython3"",\n   ""version"": ""3.6.9""\n  }\n },\n ""nbformat"": 4,\n ""nbformat_minor"": 4\n}\n</pre></body></html>Ztext/plainUUTF-8_\x10chttps://raw.githubusercontent.com/utsabigdata/AI-Workshop/master/Day-4/003Linear%%20Regression.ipynbP\x00\x08\x00\x0b\x00\x1d\x00(\x00:\x00P\x00n\x00}\x00\x94\xda\xf8\xdb\x03\xdb\t\xdbo\x00\x00\x00\x00\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdbp', 8, 9, 'invalid continuation byte')

8284 Nov 27 16:29:17 itesm-2020-35    launch_jupyter.sh[1008]: 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\\n"",\n      ""text/plain"": [\n       ""&lt;Figure size 432x288 with 1 Axes&gt;""\n      ]\n     },\n     ""metadata"": {\n      ""needs_background"": ""light""\n     },\n     ""output_type"": ""display_data""\n    }\n   ],\n   ""source"": [\n    ""plot_fit(\\""Trained Model\\"")""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": null,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": []\n  }\n ],\n ""metadata"": {\n  ""kernelspec"": {\n   ""display_name"": ""Python 3"",\n   ""language"": ""python"",\n   ""name"": ""python3""\n  },\n  ""language_info"": {\n   ""codemirror_mode"": {\n    ""name"": ""ipython"",\n    ""version"": 3\n   },\n   ""file_extension"": "".py"",\n   ""mimetype"": ""text/x-python"",\n   ""name"": ""python"",\n   ""nbconvert_exporter"": ""python"",\n   ""pygments_lexer"": ""ipython3"",\n   ""version"": ""3.6.9""\n  }\n },\n ""nbformat"": 4,\n ""nbformat_minor"": 4\n}\n</pre></body></html>Ztext/plainUUTF-8_\x10chttps://raw.githubusercontent.com/utsabigdata/AI-Workshop/master/Day-4/003Linear%%20Regression.ipynbP\x00\x08\x00\x0b\x00\x1d\x00(\x00:\x00P\x00n\x00}\x00\x94\xda\xf8\xdb\x03\xdb\t\xdbo\x00\x00\x00\x00\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdbp', 8, 9, 'invalid continuation byte')

8162 Nov 27 17:07:25 itesm-2020-35    launch_jupyter.sh[1008]: [W 17:07:25.438 LabApp] Unreadable Notebook: /root/003Linear Regression.ipynb UnicodeDecodeError('utf-8', b'bplist00\xd1\x01\x02_\x10\x0fWebMainResource\xd5\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c_\x10\x0fWebResourceData_\x10\x13WebResourceMIMEType_\x10\x1bWebResourceTextEncodingName^WebResourceURL_\x10\x14WebResourceFrameNameO\x11\xda`<html><head></head><body><pre style=""word-wrap: break-word; white-space: pre-wrap;"">{\n ""cells"": [\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 147,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""import torch\\n"",\n    ""import torch.nn as nn\\n"",\n    ""import matplotlib.pyplot as plt\\n"",\n    ""import numpy as np""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 148,\n   ""metadata"": {},\n   ""outputs"": [\n    {\n     ""data"": {\n      ""text/plain"": [\n       ""Text(0.5, 0, \'x\')""\n      ]\n     },\n     ""execution_count"": 148,\n     ""metadata"": {},\n     ""output_type"": ""execute_result""\n    },\n    {\n     ""data"": {\n      ""image/png"": ""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

8162 Nov 27 17:07:25 itesm-2020-35    launch_jupyter.sh[1008]: [W 17:07:25.437 LabApp] 400 GET /api/contents/003Linear%20Regression.ipynb?type=notebook&content=1&1606518445411 (189.209.251.75): Unreadable Notebook: /root/003Linear Regression.ipynb UnicodeDecodeError('utf-8', b'bplist00\xd1\x01\x02_\x10\x0fWebMainResource\xd5\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c_\x10\x0fWebResourceData_\x10\x13WebResourceMIMEType_\x10\x1bWebResourceTextEncodingName^WebResourceURL_\x10\x14WebResourceFrameNameO\x11\xda`<html><head></head><body><pre style=""word-wrap: break-word; white-space: pre-wrap;"">{\n ""cells"": [\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 147,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""import torch\\n"",\n    ""import torch.nn as nn\\n"",\n    ""import matplotlib.pyplot as plt\\n"",\n    ""import numpy as np""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 148,\n   ""metadata"": {},\n   ""outputs"": [\n    {\n     ""data"": {\n      ""text/plain"": [\n       ""Text(0.5, 0, \'x\')""\n      ]\n     },\n     ""execution_count"": 148,\n     ""metadata"": {},\n     ""output_type"": ""execute_result""\n    },\n    {\n     ""data"": {\n      ""image/png"": ""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

8162 Nov 27 17:06:59 itesm-2020-35    launch_jupyter.sh[1008]: [W 17:06:59.097 LabApp] Unreadable Notebook: /root/003Linear Regression.ipynb UnicodeDecodeError('utf-8', b'bplist00\xd1\x01\x02_\x10\x0fWebMainResource\xd5\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c_\x10\x0fWebResourceData_\x10\x13WebResourceMIMEType_\x10\x1bWebResourceTextEncodingName^WebResourceURL_\x10\x14WebResourceFrameNameO\x11\xda`<html><head></head><body><pre style=""word-wrap: break-word; white-space: pre-wrap;"">{\n ""cells"": [\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 147,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""import torch\\n"",\n    ""import torch.nn as nn\\n"",\n    ""import matplotlib.pyplot as plt\\n"",\n    ""import numpy as np""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 148,\n   ""metadata"": {},\n   ""outputs"": [\n    {\n     ""data"": {\n      ""text/plain"": [\n       ""Text(0.5, 0, \'x\')""\n      ]\n     },\n     ""execution_count"": 148,\n     ""metadata"": {},\n     ""output_type"": ""execute_result""\n    },\n    {\n     ""data"": {\n      ""image/png"": ""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

8162 Nov 27 17:06:59 itesm-2020-35    launch_jupyter.sh[1008]: [W 17:06:59.096 LabApp] 400 GET /api/contents/003Linear%20Regression.ipynb?type=notebook&content=1&1606518419029 (189.209.251.75): Unreadable Notebook: /root/003Linear Regression.ipynb UnicodeDecodeError('utf-8', b'bplist00\xd1\x01\x02_\x10\x0fWebMainResource\xd5\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c_\x10\x0fWebResourceData_\x10\x13WebResourceMIMEType_\x10\x1bWebResourceTextEncodingName^WebResourceURL_\x10\x14WebResourceFrameNameO\x11\xda`<html><head></head><body><pre style=""word-wrap: break-word; white-space: pre-wrap;"">{\n ""cells"": [\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 147,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""import torch\\n"",\n    ""import torch.nn as nn\\n"",\n    ""import matplotlib.pyplot as plt\\n"",\n    ""import numpy as np""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 148,\n   ""metadata"": {},\n   ""outputs"": [\n    {\n     ""data"": {\n      ""text/plain"": [\n       ""Text(0.5, 0, \'x\')""\n      ]\n     },\n     ""execution_count"": 148,\n     ""metadata"": {},\n     ""output_type"": ""execute_result""\n    },\n    {\n     ""data"": {\n      ""image/png"": ""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

8162 Nov 27 17:06:36 itesm-2020-35    launch_jupyter.sh[1008]: [W 17:06:36.133 LabApp] Unreadable Notebook: /root/003Linear Regression.ipynb UnicodeDecodeError('utf-8', b'bplist00\xd1\x01\x02_\x10\x0fWebMainResource\xd5\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c_\x10\x0fWebResourceData_\x10\x13WebResourceMIMEType_\x10\x1bWebResourceTextEncodingName^WebResourceURL_\x10\x14WebResourceFrameNameO\x11\xda`<html><head></head><body><pre style=""word-wrap: break-word; white-space: pre-wrap;"">{\n ""cells"": [\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 147,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""import torch\\n"",\n    ""import torch.nn as nn\\n"",\n    ""import matplotlib.pyplot as plt\\n"",\n    ""import numpy as np""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 148,\n   ""metadata"": {},\n   ""outputs"": [\n    {\n     ""data"": {\n      ""text/plain"": [\n       ""Text(0.5, 0, \'x\')""\n      ]\n     },\n     ""execution_count"": 148,\n     ""metadata"": {},\n     ""output_type"": ""execute_result""\n    },\n    {\n     ""data"": {\n      ""image/png"": ""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

8162 Nov 27 17:06:36 itesm-2020-35    launch_jupyter.sh[1008]: [W 17:06:36.133 LabApp] 400 GET /api/contents/003Linear%20Regression.ipynb?type=notebook&content=1&1606518396109 (189.209.251.75): Unreadable Notebook: /root/003Linear Regression.ipynb UnicodeDecodeError('utf-8', b'bplist00\xd1\x01\x02_\x10\x0fWebMainResource\xd5\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c_\x10\x0fWebResourceData_\x10\x13WebResourceMIMEType_\x10\x1bWebResourceTextEncodingName^WebResourceURL_\x10\x14WebResourceFrameNameO\x11\xda`<html><head></head><body><pre style=""word-wrap: break-word; white-space: pre-wrap;"">{\n ""cells"": [\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 147,\n   ""metadata"": {},\n   ""outputs"": [],\n   ""source"": [\n    ""import torch\\n"",\n    ""import torch.nn as nn\\n"",\n    ""import matplotlib.pyplot as plt\\n"",\n    ""import numpy as np""\n   ]\n  },\n  {\n   ""cell_type"": ""code"",\n   ""execution_count"": 148,\n   ""metadata"": {},\n   ""outputs"": [\n    {\n     ""data"": {\n      ""text/plain"": [\n       ""Text(0.5, 0, \'x\')""\n      ]\n     },\n     ""execution_count"": 148,\n     ""metadata"": {},\n     ""output_type"": ""execute_result""\n    },\n    {\n     ""data"": {\n      ""image/png"": ""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
